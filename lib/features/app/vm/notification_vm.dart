import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:moodlyy_application/features/settings/data/user_settings_services.dart';

/// C·ªïng tr·ª´u t∆∞·ª£ng ƒë·ªÉ schedule/cancel th√¥ng b√°o.
/// App c·ªßa em c√≥ th·ªÉ inject implementation th·∫≠t (flutter_local_notifications, awesome_notifications, FCM, ...).
abstract class NotificationsPort {
  Future<void> scheduleDaily({
    required int id,
    required TimeOfDay time,
    required String title,
    required String body,
  });

  Future<void> cancel(int id);
}

/// M·∫∑c ƒë·ªãnh: no-op (kh√¥ng l√†m g√¨). Gi·ªØ nguy√™n logic hi·ªán t·∫°i n·∫øu ch∆∞a t√≠ch h·ª£p service th·∫≠t.
class NullNotificationsPort implements NotificationsPort {
  @override
  Future<void> scheduleDaily({
    required int id,
    required TimeOfDay time,
    required String title,
    required String body,
  }) async {}

  @override
  Future<void> cancel(int id) async {}
}

class NotificationVM extends ChangeNotifier {
  final UserSettingsService _service;
  final NotificationsPort _port;

  NotificationVM(this._service, [NotificationsPort? port])
    : _port = port ?? NullNotificationsPort();

  // Tr·∫°ng th√°i b·∫≠t/t·∫Øt theo user (ƒë·ªçc t·ª´ DB)
  bool notifQuote = false;
  bool notifStreak = false;

  // ID v√† khung gi·ªù c·ªë ƒë·ªãnh
  static const int _quoteId = 1001;
  static const int _streakId = 1002;

  static const TimeOfDay _quoteTime = TimeOfDay(hour: 8, minute: 0); // 08:00
  static const TimeOfDay _streakTime = TimeOfDay(hour: 20, minute: 24); // 20:00

  static const String _title = 'Moodly';
  static const String _quoteBody = "Don't forget to check your quote today!";
  static const String _streakBody = "Keep your streak now! Don't lose it";

  /// ƒê·ªçc c·ªù t·ª´ DB ‚Üí c·∫≠p nh·∫≠t state (kh√¥ng schedule ·ªü ƒë√¢y).
  Future<void> load(String userId) async {
    final flags = await _service.fetchNotificationFlags(userId);
    notifQuote = flags['notif_quote'] ?? false;
    notifStreak = flags['notif_streak'] ?? false;
    notifyListeners();
  }

  /// ƒê·ªìng b·ªô FULL cho 1 user: load c·ªù + schedule theo c·ªù hi·ªán t·∫°i.
  Future<void> syncForUser(String userId) async {
    await load(userId);
    await _applySchedule();
  }

  /// B·∫≠t/t·∫Øt quote ‚Üí l∆∞u DB ‚Üí reschedule theo tr·∫°ng th√°i m·ªõi.
  Future<void> toggleQuote(String userId, bool value) async {
    notifQuote = value;
    await _service.upsertNotifications(userId: userId, notifQuote: value);
    await _applySchedule();
    notifyListeners();
  }

  /// B·∫≠t/t·∫Øt streak ‚Üí l∆∞u DB ‚Üí reschedule theo tr·∫°ng th√°i m·ªõi.
  Future<void> toggleStreak(String userId, bool value) async {
    notifStreak = value;
    await _service.upsertNotifications(userId: userId, notifStreak: value);
    await _applySchedule();
    notifyListeners();
  }

  /// √Åp d·ª•ng l·ªãch theo state hi·ªán t·∫°i (g·ªçi c·ªïng NotificationsPort).
  Future<void> _applySchedule() async {
    if (notifQuote) {
      await _port.scheduleDaily(
        id: _quoteId,
        time: _quoteTime,
        title: _title,
        body: _quoteBody,
      );
    } else {
      await _port.cancel(_quoteId);
    }

    if (notifStreak) {
      await _port.scheduleDaily(
        id: _streakId,
        time: _streakTime,
        title: _title,
        body: _streakBody,
      );
    } else {
      await _port.cancel(_streakId);
    }
    debugPrint(
      'üîî Applying schedule: notifQuote=$notifQuote, notifStreak=$notifStreak',
    );
  }
}
